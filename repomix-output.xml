This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
main.py
requirements.txt
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
.DS_Store
__pycache__
.venv
</file>

<file path="main.py">
from typing import Annotated, List
from contextlib import asynccontextmanager
from datetime import datetime

from fastapi import FastAPI, Depends
from sqlmodel import Field, SQLModel, create_engine, Session, select, JSON

# SQLModels    
class Post(SQLModel, table=True):
    id: int | None = Field(default=None, primary_key=True)
    title: str 
    content: str
    category: str
    tags: str
    createdAt: datetime = Field(default_factory=datetime.now)
    # updatedAt: datetime = Field(default_factory=datetime.now)


# Database Connection
MYSQL_DATABASE = "blogging-platform-api"
DATABASE_URL = f"mysql+pymysql://root:Zeus_3245@localhost:3306/{MYSQL_DATABASE}"
engine = create_engine(DATABASE_URL, echo=True)

def create_db_and_tables():
    SQLModel.metadata.create_all(engine)

def get_session():
    db = Session(engine)
    try:
        yield db
    finally:
        db.close()

SessionDep = Annotated[Session, Depends(get_session)]

@asynccontextmanager
async def lifespan(app: FastAPI):
    create_db_and_tables()
    yield

# FastAPI Instantiation
app = FastAPI(lifespan=lifespan)

## Path Operations

@app.get("/posts/")
async def read_posts(
    session: SessionDep,
):
    posts = session.exec(select(Post)).all()
    return posts

@app.post("/posts/")
def create_post(post: Post, session: SessionDep):
    db_post = Post.model_validate(post)
    session.add(db_post)
    session.commit()
    session.refresh(db_post)
    return db_post
</file>

<file path="requirements.txt">
annotated-types==0.7.0
anyio==4.9.0
certifi==2025.6.15
click==8.2.1
dnspython==2.7.0
email_validator==2.2.0
exceptiongroup==1.3.0
fastapi==0.115.13
fastapi-cli==0.0.7
h11==0.16.0
httpcore==1.0.9
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.6
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.11.7
pydantic_core==2.33.2
Pygments==2.19.1
python-dotenv==1.1.0
python-multipart==0.0.20
PyYAML==6.0.2
rich==14.0.0
rich-toolkit==0.14.7
shellingham==1.5.4
sniffio==1.3.1
starlette==0.46.2
typer==0.16.0
typing-inspection==0.4.1
typing_extensions==4.14.0
uvicorn==0.34.3
uvloop==0.21.0
watchfiles==1.1.0
websockets==15.0.1
</file>

</files>
